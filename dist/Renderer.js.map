{"version":3,"sources":["Renderer.js"],"names":["colors","require","color_Code","Map","Renderer","setColors","process","stdout","write","set","cyan","magenta","blue","green","yellow","msg","index","Math","floor","random","get","cell","_cell","isAlive","log","getRandomColor","_isSelected","inverse","gray","row","j","length","printCell","Board","i","_Cells","printRow","module","exports"],"mappings":"AAAC;;;;;;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,aAAa,IAAIC,GAAJ,EAAjB;;IAEKC;;;;;;;yBACE;AACN,QAAKC,SAAL;AACA;;;kCAEe;AACbC,WAAQC,MAAR,CAAeC,KAAf;AACF;;;8BAEW;AACXN,cAAWO,GAAX,CAAe,CAAf,EAAkBT,OAAOU,IAAzB;AACAR,cAAWO,GAAX,CAAe,CAAf,EAAkBT,OAAOW,OAAzB;AACAT,cAAWO,GAAX,CAAe,CAAf,EAAkBT,OAAOY,IAAzB;AACAV,cAAWO,GAAX,CAAe,CAAf,EAAkBT,OAAOa,KAAzB;AACAX,cAAWO,GAAX,CAAe,CAAf,EAAkBT,OAAOc,MAAzB;AACA;;;sBAEGC,KAAK;AACPT,WAAQC,MAAR,CAAeC,KAAf,MAAwBO,GAAxB;AACD;;;mCAEgB;AAChB,OAAIC,QAAQC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,CAAjB,GAAsB,CAAjC,CAAZ;AACA,UAAOjB,WAAWkB,GAAX,CAAeJ,KAAf,CAAP;AACA;;;4BAESK,MAAM;AACf,OAAMC,iBAAN;AACA,OAAID,KAAKE,OAAT,EACC,KAAKC,GAAL,CAAS,KAAKC,cAAL,GAAsBH,KAAtB,CAAT,EADD,KAEK,IAAID,KAAKK,WAAT,EACJ,KAAKF,GAAL,CAASxB,OAAO2B,OAAP,CAAeL,KAAf,CAAT,EADI,KAGJ,KAAKE,GAAL,CAASxB,OAAO4B,IAAP,CAAYN,KAAZ,CAAT;AACD;;;2BAEQO,KAAK;AACZ,QAAK,IAAIC,IAAID,IAAIE,MAAJ,GAAa,CAA1B,EAA6BD,KAAK,CAAlC,EAAqCA,GAArC,EAA0C;AACzC,SAAKE,SAAL,CAAeH,IAAIC,CAAJ,CAAf;AACA;AACD,QAAKN,GAAL,CAAS,IAAT;AACD;;;6BAEUS,OAAO;AACjB;AACC,QAAK,IAAIC,IAAID,MAAME,MAAN,CAAaJ,MAAb,GAAsB,CAAnC,EAAsCG,KAAK,CAA3C,EAA8CA,GAA9C,EAAmD;AAClD,QAAIL,MAAMI,MAAME,MAAN,CAAaD,CAAb,CAAV;AACD,SAAKE,QAAL,CAAcP,GAAd;AACC;AACF;;;;;;AAGFQ,OAAOC,OAAP,GAAiBlC,QAAjB","file":"Renderer.js","sourcesContent":[" 'use strict';\n var colors = require('colors'); \n let color_Code = new Map();\n\nclass Renderer {\n\tinit() {\n\t\tthis.setColors();\n\t}\n\n\treset_console() {\n\t   process.stdout.write(`\\x1Bc`);\n\t}\n\n\tsetColors() {\n\t\tcolor_Code.set(1, colors.cyan);\n\t\tcolor_Code.set(2, colors.magenta);\n\t\tcolor_Code.set(3, colors.blue);\n\t\tcolor_Code.set(4, colors.green);\n\t\tcolor_Code.set(5, colors.yellow);\n\t}\n\n\tlog(msg) {\n\t  process.stdout.write(`${msg}`);\n\t};\n\n\tgetRandomColor() {\n\t\tlet index = Math.floor((Math.random() * 5) + 1);\n\t\treturn color_Code.get(index);\n\t}\n\n\tprintCell(cell) {\n\t\tconst _cell = `\\u2022 `;\n\t\tif (cell.isAlive) \n\t\t\tthis.log(this.getRandomColor()(_cell));\n\t\telse if (cell._isSelected)\n\t\t\tthis.log(colors.inverse(_cell));\n\t\telse\n\t\t\tthis.log(colors.gray(_cell));\n\t}\n\n\tprintRow(row) {\n \t\tfor (var j = row.length - 1; j >= 0; j--) {\n \t\t\tthis.printCell(row[j]);\n \t\t}\n \t\tthis.log('\\n');\n\t}\n\n\tprintBoard(Board) {\n\t\t// this.reset_console();\n \t\tfor (var i = Board._Cells.length - 1; i >= 0; i--) {\n \t\t\tlet row = Board._Cells[i];\n\t\t\tthis.printRow(row);\n \t\t}\t\n\t}\n}\n\nmodule.exports = Renderer;\n"]}